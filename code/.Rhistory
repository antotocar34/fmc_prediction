}
names = c(names, names(test))
names(data) <- names
data = data %>% filter(Fuel == fuel)
return(data)
}
plot_compare_pred <- function(predictions, test, obs, fuel, modelnames, colors){
data <- combine_predictions_for_plot(predictions, test, fuel)
plot <- ggplot(data=data) +
geom_point(mapping=aes(x=obs, y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="grey") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
for (i in seq(1:length(predictions))){
gg.data <- data.frame(fit = data[,(3 * i - 2)], upr = data[,(3 * i)], lwr = data[,(3 * i - 1)])
plot = plot + geom_point(data = gg.data, mapping=aes(x=1:obs, y = fit), color = colors[i], size=1) +
geom_errorbar(data = gg.data, mapping=aes(x=1:obs, ymin=lwr, ymax=upr), color = colors[i], width=0.5, alpha=0.6)
}
return(plot)
}
plot_grid_pred <- function(predictions, test, obs, fuel, modelnames, colors, cols=2){
plots <- list()
for (i in 1:length(predictions)){
data <- cbind(predictions[i], test)
data <- data %>% filter(Fuel==fuel)
plots[[i]] <- plot_lmer_pred(data, obs, colors[i]) + theme(axis.title.y=element_blank(), axis.title.x=element_blank(), legend.position="none", plot.title = element_text(size=9)) + labs(title=modelnames[i])
}
grid <- grid.arrange(arrangeGrob(grobs=plots, bottom=textGrob("Observations", gp=gpar(fontsize=9)), left=textGrob("LFMC (Percent with 95% Intervals)", rot=90, gp=gpar(fontsize=9)), ncol=cols))
return(grid)
}
models <- c("PCA Min", "BMS Varying 6 Slopes")
predictions <- list(pca_pc_all, bms_var_slope_6)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
#plot a lmer pred with PI values. can use ols predict(model, data, interval="confidence)
#pass result from either that or predictInterval(lmer.fit, data) to this function
#obs is first n number of observations to plot
plot_lmer_pred <- function(data, obs, color){
plot <- ggplot(data=data[obs,]) +
geom_linerange(mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color="black", alpha=0.5) +
geom_point(mapping=aes(x=1:nrow(data), y = fit), color=color, size=1) +
geom_point(mapping=aes(x=1:nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="blue") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
#+ ggtitle(paste0("Predictions for ", title))
return(plot)
}
plot_all_species <- function(pred, test, prefix){
fitted <- cbind(pred, test)
fuels <- as.character(distinct(fitted, Fuel)[,1])
for (fuel in fuels){
fitted_fuel <- subset(fitted, Fuel==fuel, select=c("Percent", "Fuel", "fit", "upr", "lwr"))
plot <- plot_lmer_pred(fitted_fuel, color="black")
ggsave(plot, file=paste0("analysis/results/", modeltype, "/figs/", prefix, fuel, ".png"), width=14, height=10, units="cm")
}
}
combine_predictions_for_plot <- function(predictions, test, fuel){
data = cbind(predictions, test)
names = c()
for (i in 1:length(predictions)){
names = c(names, paste0("fit", i), paste0("upr", i), paste0("lwr", i))
}
names = c(names, names(test))
names(data) <- names
data = data %>% filter(Fuel == fuel)
return(data)
}
plot_compare_pred <- function(predictions, test, obs, fuel, modelnames, colors){
data <- combine_predictions_for_plot(predictions, test, fuel)
plot <- ggplot(data=data) +
geom_point(mapping=aes(x=nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="grey") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
for (i in seq(1:length(predictions))){
gg.data <- data.frame(fit = data[,(3 * i - 2)], upr = data[,(3 * i)], lwr = data[,(3 * i - 1)])
plot = plot + geom_point(data = gg.data, mapping=aes(x=1:nrow(data), y = fit), color = colors[i], size=1) +
geom_errorbar(data = gg.data, mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color = colors[i], width=0.5, alpha=0.6)
}
return(plot)
}
plot_grid_pred <- function(predictions, test, obs, fuel, modelnames, colors, cols=2){
plots <- list()
for (i in 1:length(predictions)){
data <- cbind(predictions[i], test)
data <- data %>% filter(Fuel==fuel)
plots[[i]] <- plot_lmer_pred(data, obs, colors[i]) + theme(axis.title.y=element_blank(), axis.title.x=element_blank(), legend.position="none", plot.title = element_text(size=9)) + labs(title=modelnames[i])
}
grid <- grid.arrange(arrangeGrob(grobs=plots, bottom=textGrob("Observations", gp=gpar(fontsize=9)), left=textGrob("LFMC (Percent with 95% Intervals)", rot=90, gp=gpar(fontsize=9)), ncol=cols))
return(grid)
}
models <- c("PCA Min", "BMS Varying 6 Slopes")
predictions <- list(pca_pc_all, bms_var_slope_6)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
#plot a lmer pred with PI values. can use ols predict(model, data, interval="confidence)
#pass result from either that or predictInterval(lmer.fit, data) to this function
#obs is first n number of observations to plot
plot_lmer_pred <- function(data, obs, color){
plot <- ggplot(data=data[obs,]) +
geom_linerange(mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color="black", alpha=0.5) +
geom_point(mapping=aes(x=1:nrow(data), y = fit), color=color, size=1) +
geom_point(mapping=aes(x=1:nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="blue") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
#+ ggtitle(paste0("Predictions for ", title))
return(plot)
}
plot_all_species <- function(pred, test, prefix){
fitted <- cbind(pred, test)
fuels <- as.character(distinct(fitted, Fuel)[,1])
for (fuel in fuels){
fitted_fuel <- subset(fitted, Fuel==fuel, select=c("Percent", "Fuel", "fit", "upr", "lwr"))
plot <- plot_lmer_pred(fitted_fuel, color="black")
ggsave(plot, file=paste0("analysis/results/", modeltype, "/figs/", prefix, fuel, ".png"), width=14, height=10, units="cm")
}
}
combine_predictions_for_plot <- function(predictions, test, fuel){
data = cbind(predictions, test)
names = c()
for (i in 1:length(predictions)){
names = c(names, paste0("fit", i), paste0("upr", i), paste0("lwr", i))
}
names = c(names, names(test))
names(data) <- names
data = data %>% filter(Fuel == fuel)
return(data)
}
plot_compare_pred <- function(predictions, test, obs, fuel, modelnames, colors){
data <- combine_predictions_for_plot(predictions, test, fuel)
plot <- ggplot(data=data) +
geom_point(mapping=aes(x=nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="grey") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
for (i in seq(1:length(predictions))){
gg.data <- data.frame(fit = data[,(3 * i - 2)], upr = data[,(3 * i)], lwr = data[,(3 * i - 1)])
plot = plot + geom_point(data = gg.data, mapping=aes(x=1:nrow(data), y = fit), color = colors[i], size=1) +
geom_errorbar(data = gg.data, mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color = colors[i], width=0.5, alpha=0.6)
}
return(plot)
}
plot_grid_pred <- function(predictions, test, obs, fuel, modelnames, colors, cols=2){
plots <- list()
for (i in 1:length(predictions)){
data <- cbind(predictions[i], test)
data <- data %>% filter(Fuel==fuel)
plots[[i]] <- plot_lmer_pred(data, obs, colors[i]) + theme(axis.title.y=element_blank(), axis.title.x=element_blank(), legend.position="none", plot.title = element_text(size=9)) + labs(title=modelnames[i])
}
grid <- grid.arrange(arrangeGrob(grobs=plots, bottom=textGrob("Observations", gp=gpar(fontsize=9)), left=textGrob("LFMC (Percent with 95% Intervals)", rot=90, gp=gpar(fontsize=9)), ncol=cols))
return(grid)
}
#plot a lmer pred with PI values. can use ols predict(model, data, interval="confidence)
#pass result from either that or predictInterval(lmer.fit, data) to this function
#obs is first n number of observations to plot
plot_lmer_pred <- function(df, obs, color){
plot <- ggplot(data=df[obs,]) +
geom_linerange(mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color="black", alpha=0.5) +
geom_point(mapping=aes(x=1:nrow(data), y = fit), color=color, size=1) +
geom_point(mapping=aes(x=1:nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="blue") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
#+ ggtitle(paste0("Predictions for ", title))
return(plot)
}
plot_all_species <- function(pred, test, prefix){
fitted <- cbind(pred, test)
fuels <- as.character(distinct(fitted, Fuel)[,1])
for (fuel in fuels){
fitted_fuel <- subset(fitted, Fuel==fuel, select=c("Percent", "Fuel", "fit", "upr", "lwr"))
plot <- plot_lmer_pred(fitted_fuel, color="black")
ggsave(plot, file=paste0("analysis/results/", modeltype, "/figs/", prefix, fuel, ".png"), width=14, height=10, units="cm")
}
}
combine_predictions_for_plot <- function(predictions, test, fuel){
data = cbind(predictions, test)
names = c()
for (i in 1:length(predictions)){
names = c(names, paste0("fit", i), paste0("upr", i), paste0("lwr", i))
}
names = c(names, names(test))
names(data) <- names
data = data %>% filter(Fuel == fuel)
return(data)
}
plot_compare_pred <- function(predictions, test, obs, fuel, modelnames, colors){
data <- combine_predictions_for_plot(predictions, test, fuel)
plot <- ggplot(data=data) +
geom_point(mapping=aes(x=nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="grey") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
for (i in seq(1:length(predictions))){
gg.data <- data.frame(fit = data[,(3 * i - 2)], upr = data[,(3 * i)], lwr = data[,(3 * i - 1)])
plot = plot + geom_point(data = gg.data, mapping=aes(x=1:nrow(data), y = fit), color = colors[i], size=1) +
geom_errorbar(data = gg.data, mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color = colors[i], width=0.5, alpha=0.6)
}
return(plot)
}
plot_grid_pred <- function(predictions, test, obs, fuel, modelnames, colors, cols=2){
plots <- list()
for (i in 1:length(predictions)){
data <- cbind(predictions[i], test)
data <- data %>% filter(Fuel==fuel)
plots[[i]] <- plot_lmer_pred(data, obs, colors[i]) + theme(axis.title.y=element_blank(), axis.title.x=element_blank(), legend.position="none", plot.title = element_text(size=9)) + labs(title=modelnames[i])
}
grid <- grid.arrange(arrangeGrob(grobs=plots, bottom=textGrob("Observations", gp=gpar(fontsize=9)), left=textGrob("LFMC (Percent with 95% Intervals)", rot=90, gp=gpar(fontsize=9)), ncol=cols))
return(grid)
}
#plot a lmer pred with PI values. can use ols predict(model, data, interval="confidence)
#pass result from either that or predictInterval(lmer.fit, data) to this function
#obs is first n number of observations to plot
plot_lmer_pred <- function(df, obs, color){
plot <- ggplot(data=df[obs,]) +
geom_linerange(mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color="black", alpha=0.5) +
geom_point(mapping=aes(x=1:nrow(data), y = fit), color=color, size=1) +
geom_point(mapping=aes(x=1:nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="blue") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
#+ ggtitle(paste0("Predictions for ", title))
return(plot)
}
plot_all_species <- function(pred, test, prefix){
fitted <- cbind(pred, test)
fuels <- as.character(distinct(fitted, Fuel)[,1])
for (fuel in fuels){
fitted_fuel <- subset(fitted, Fuel==fuel, select=c("Percent", "Fuel", "fit", "upr", "lwr"))
plot <- plot_lmer_pred(fitted_fuel, color="black")
ggsave(plot, file=paste0("analysis/results/", modeltype, "/figs/", prefix, fuel, ".png"), width=14, height=10, units="cm")
}
}
combine_predictions_for_plot <- function(predictions, test, fuel){
data = cbind(predictions, test)
names = c()
for (i in 1:length(predictions)){
names = c(names, paste0("fit", i), paste0("upr", i), paste0("lwr", i))
}
names = c(names, names(test))
names(data) <- names
data = data %>% filter(Fuel == fuel)
return(data)
}
plot_compare_pred <- function(predictions, test, fuel, modelnames, colors){
data <- combine_predictions_for_plot(predictions, test, fuel)
plot <- ggplot(data=data) +
geom_point(mapping=aes(x=nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="grey") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
for (i in seq(1:length(predictions))){
gg.data <- data.frame(fit = data[,(3 * i - 2)], upr = data[,(3 * i)], lwr = data[,(3 * i - 1)])
plot = plot + geom_point(data = gg.data, mapping=aes(x=1:nrow(data), y = fit), color = colors[i], size=1) +
geom_errorbar(data = gg.data, mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color = colors[i], width=0.5, alpha=0.6)
}
return(plot)
}
plot_grid_pred <- function(predictions, test, obs, fuel, modelnames, colors, cols=2){
plots <- list()
for (i in 1:length(predictions)){
data <- cbind(predictions[i], test)
data <- data %>% filter(Fuel==fuel)
plots[[i]] <- plot_lmer_pred(data, obs, colors[i]) + theme(axis.title.y=element_blank(), axis.title.x=element_blank(), legend.position="none", plot.title = element_text(size=9)) + labs(title=modelnames[i])
}
grid <- grid.arrange(arrangeGrob(grobs=plots, bottom=textGrob("Observations", gp=gpar(fontsize=9)), left=textGrob("LFMC (Percent with 95% Intervals)", rot=90, gp=gpar(fontsize=9)), ncol=cols))
return(grid)
}
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
#plot a lmer pred with PI values. can use ols predict(model, data, interval="confidence)
#pass result from either that or predictInterval(lmer.fit, data) to this function
#obs is first n number of observations to plot
plot_lmer_pred <- function(df, obs, color){
plot <- ggplot(data=df[obs,]) +
browser()
geom_linerange(mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color="black", alpha=0.5) +
geom_point(mapping=aes(x=1:nrow(data), y = fit), color=color, size=1) +
geom_point(mapping=aes(x=1:nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="blue") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
#+ ggtitle(paste0("Predictions for ", title))
return(plot)
}
plot_all_species <- function(pred, test, prefix){
fitted <- cbind(pred, test)
fuels <- as.character(distinct(fitted, Fuel)[,1])
for (fuel in fuels){
fitted_fuel <- subset(fitted, Fuel==fuel, select=c("Percent", "Fuel", "fit", "upr", "lwr"))
plot <- plot_lmer_pred(fitted_fuel, color="black")
ggsave(plot, file=paste0("analysis/results/", modeltype, "/figs/", prefix, fuel, ".png"), width=14, height=10, units="cm")
}
}
combine_predictions_for_plot <- function(predictions, test, fuel){
data = cbind(predictions, test)
names = c()
for (i in 1:length(predictions)){
names = c(names, paste0("fit", i), paste0("upr", i), paste0("lwr", i))
}
names = c(names, names(test))
names(data) <- names
data = data %>% filter(Fuel == fuel)
return(data)
}
plot_compare_pred <- function(predictions, test, fuel, modelnames, colors){
data <- combine_predictions_for_plot(predictions, test, fuel)
plot <- ggplot(data=data) +
geom_point(mapping=aes(x=nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="grey") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
for (i in seq(1:length(predictions))){
gg.data <- data.frame(fit = data[,(3 * i - 2)], upr = data[,(3 * i)], lwr = data[,(3 * i - 1)])
plot = plot + geom_point(data = gg.data, mapping=aes(x=1:nrow(data), y = fit), color = colors[i], size=1) +
geom_errorbar(data = gg.data, mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color = colors[i], width=0.5, alpha=0.6)
}
return(plot)
}
plot_grid_pred <- function(predictions, test, obs, fuel, modelnames, colors, cols=2){
plots <- list()
for (i in 1:length(predictions)){
data <- cbind(predictions[i], test)
data <- data %>% filter(Fuel==fuel)
plots[[i]] <- plot_lmer_pred(data, obs, colors[i]) + theme(axis.title.y=element_blank(), axis.title.x=element_blank(), legend.position="none", plot.title = element_text(size=9)) + labs(title=modelnames[i])
}
grid <- grid.arrange(arrangeGrob(grobs=plots, bottom=textGrob("Observations", gp=gpar(fontsize=9)), left=textGrob("LFMC (Percent with 95% Intervals)", rot=90, gp=gpar(fontsize=9)), ncol=cols))
return(grid)
}
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
data
nrow(data)
nrow(data)
head(data)
nrow(df)
df[1:100,]
nrow(df[1:100,])
obs
data
#plot a lmer pred with PI values. can use ols predict(model, data, interval="confidence)
#pass result from either that or predictInterval(lmer.fit, data) to this function
#obs is first n number of observations to plot
plot_lmer_pred <- function(df, obs, color){
data <- df[obs,]
plot <- ggplot(data=data) +
geom_linerange(mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color="black", alpha=0.5) +
geom_point(mapping=aes(x=1:nrow(data), y = fit), color=color, size=1) +
geom_point(mapping=aes(x=1:nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="blue") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
#+ ggtitle(paste0("Predictions for ", title))
return(plot)
}
plot_all_species <- function(pred, test, prefix){
fitted <- cbind(pred, test)
fuels <- as.character(distinct(fitted, Fuel)[,1])
for (fuel in fuels){
fitted_fuel <- subset(fitted, Fuel==fuel, select=c("Percent", "Fuel", "fit", "upr", "lwr"))
plot <- plot_lmer_pred(fitted_fuel, color="black")
ggsave(plot, file=paste0("analysis/results/", modeltype, "/figs/", prefix, fuel, ".png"), width=14, height=10, units="cm")
}
}
combine_predictions_for_plot <- function(predictions, test, fuel){
data = cbind(predictions, test)
names = c()
for (i in 1:length(predictions)){
names = c(names, paste0("fit", i), paste0("upr", i), paste0("lwr", i))
}
names = c(names, names(test))
names(data) <- names
data = data %>% filter(Fuel == fuel)
return(data)
}
plot_compare_pred <- function(predictions, test, fuel, modelnames, colors){
data <- combine_predictions_for_plot(predictions, test, fuel)
plot <- ggplot(data=data) +
geom_point(mapping=aes(x=nrow(data), y = Percent), color="red", size=1) +
geom_hline(yintercept=79, linetype="dashed", color="grey") +
xlab("Observations") + ylab("Predictions and 95% PI") + theme_classic()
for (i in seq(1:length(predictions))){
gg.data <- data.frame(fit = data[,(3 * i - 2)], upr = data[,(3 * i)], lwr = data[,(3 * i - 1)])
plot = plot + geom_point(data = gg.data, mapping=aes(x=1:nrow(data), y = fit), color = colors[i], size=1) +
geom_errorbar(data = gg.data, mapping=aes(x=1:nrow(data), ymin=lwr, ymax=upr), color = colors[i], width=0.5, alpha=0.6)
}
return(plot)
}
plot_grid_pred <- function(predictions, test, obs, fuel, modelnames, colors, cols=2){
plots <- list()
for (i in 1:length(predictions)){
data <- cbind(predictions[i], test)
data <- data %>% filter(Fuel==fuel)
plots[[i]] <- plot_lmer_pred(data, obs, colors[i]) + theme(axis.title.y=element_blank(), axis.title.x=element_blank(), legend.position="none", plot.title = element_text(size=9)) + labs(title=modelnames[i])
}
grid <- grid.arrange(arrangeGrob(grobs=plots, bottom=textGrob("Observations", gp=gpar(fontsize=9)), left=textGrob("LFMC (Percent with 95% Intervals)", rot=90, gp=gpar(fontsize=9)), ncol=cols))
return(grid)
}
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4 <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_min), pca_test, 1:100, "chamise", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA Min"), colors=colors, cols=2)
models <- c("PCA All", "BMS Varying 11 Slopes")
predictions <- list(pca_pc_all, bms_var_slope_11)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4 <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:100, "chamise", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA Min"), colors=colors, cols=2)
models <- c("PCA All", "BMS Varying 11 Slopes")
predictions <- list(pca_pc_all, bms_var_slope_11)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 1:50, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4 <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:50, "chamise", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA Min"), colors=colors, cols=2)
models <- c("PCA All", "BMS Varying 11 Slopes")
predictions <- list(pca_pc_all, bms_var_slope_11)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 1:50, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4 <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:50, "chamise", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
g4 <- plot_grid_pred(list(pca_ols_unpooled, pca_pc_all, bms_var_slope_11), pca_test, 1:50, "chamise", modelnames=c("OLS of 22 PCs Unpooled","PCA 22 PCs", "BMS Varying 11 Slopes"), colors=colors, cols=1)
g4 <- plot_grid_pred(list(pca_ols_unpooled, pca_pc_all, bms_var_slope_11), pca_test, 1:100, "chamise", modelnames=c("OLS of 22 PCs Unpooled","PCA 22 PCs", "BMS Varying 11 Slopes"), colors=colors, cols=1)
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4 <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:50, "chamise", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
g4buck <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:50, "buckwheat, eastern mojave", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
g4buck <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:41, "buckwheat, eastern mojave", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
g4buck <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:41, "sage, black", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
predictions <- list(pca_pc_all, pca_ols_unpooled)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4buck <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, bms_var_slope_11, pca_pc_all), pca_test, 1:41, "sage, black", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
models <- c("PCA All", "BMS Varying 11 Slopes")
predictions <- list(pca_pc_all, pca_ols_unpooled)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4 <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:50, "chamise", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
g4buck <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, bms_var_slope_11, pca_pc_all), pca_test, 1:41, "sage, black", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
g4buck <- plot_grid_pred(list(bms_var_slope_11, pca_pc_all), pca_test, 1:41, "sage, black", modelnames=c("BMS Varying Slope of 11 Vars", "PCA Varying Slope of 22 PCs"), colors=colors, cols=1)
g4 <- plot_grid_pred(list(pca_ols_pooled, pca_ols_unpooled, pca_var_int, pca_pc_all), pca_test, 1:50, "chamise", modelnames=c("OLS of 22 of PCs Pooled", "OLS of 22 PCs Unpooled", "PCA Intercept Only", "PCA 22 PCs"), colors=colors, cols=2)
models <- c("OLS of 22 of PCs Unpooled", "PCA Varying Slope of 22 PCs")
predictions <- list(pca_ols_unpooled, pca_pc_all)
colors <- c("green", "orange", "turquoise2", "purple")
g2 <- plot_grid_pred(predictions, pca_test, 1:100, "chamise", models, colors=c("purple", "chartreuse4"), cols=1)
g4 <- plot_grid_pred(list(bms_var_slope_11, pca_pc_all), pca_test, 1:41, "sage, black", modelnames=c("BMS Varying Slope of 11 Vars", "PCA Varying Slope of 22 PCs"), colors=colors, cols=1)
savepath="~/Documents/statistical_inference/stat_proj/fmc_prediction/code/analysis/results"
ggsave(paste0(savepath, "/sageblack_bms_pca_comparison_sageblack.png"), plot=g4, dpi="print")
ggsave(paste0(savepath, "/sageblack_ols_pca_comparison_chamise.png"), plot=g2, dpi="print")
load("~/Documents/statistical_inference/stat_proj/fmc_prediction/code/analysis/results/pca/pca_final2.RData")
stargazer(lmeranova, out="analysis/results/bms/lmer_anova_bms.tex", summary=F)
load("~/Documents/statistical_inference/stat_proj/fmc_prediction/code/analysis/results/pca/pca_final2.RData")
library(stargazer)
#GET R2 for each group, pass just the prediction column as predictions
modeltype = "pca"
stargazer(all_results, out=paste0("analysis/results/", modeltype, "/r2_results_", modeltype, ".tex"), summary=F)
library(tidyverse)
library(plyr)
library(ggplot2)
library(glmnet)
library(mombf)
library(rstanarm)
library(caret)
library(rstan)
library(lme4)
library(blme)
library(fixest)
library(splitTools)
library(arm)
library(merTools)
library(stargazer)
library(lmerTest)
library(sjstats)
library(gridExtra)
PATH = "/home/clinton/Documents/statistical_inference/stat_proj/fmc_prediction/code"
setwd(PATH)
stargazer(all_results, out=paste0("analysis/results/", modeltype, "/r2_results_", modeltype, ".tex"), summary=F)
setwd("~/Documents/statistical_inference/stat_proj/fmc_prediction/code")
stargazer(all_results, out=paste0("analysis/results/", modeltype, "/r2_results_", modeltype, ".tex"), summary=F)
getwd()
stargazer(all_results, out="r2_results_pca.tex", summary=F)
load("~/Documents/statistical_inference/stat_proj/fmc_prediction/code/analysis/results/bms/BMS_results.RData")
stargazer(all_results, out="r2_results_bms.tex", summary=F)
load("~/Documents/statistical_inference/stat_proj/fmc_prediction/code/analysis/results/pca/pca_prediction_results_only.RData")
stargazer(pca_all_results, out="r2_results_pca.tex", summary=F)
library(tidyverse)
library(plyr)
library(stargazer)
library(factoextra)
PATH = "/home/clinton/Documents/statistical_inference/stat_proj/fmc_prediction/code"
setwd(PATH)
data = read.csv("data/processed_data/socc_ndvi_postprocess.csv")
data <- data[,-which(names(data) %in% c("X", "AccSpeciesID", "nearest_stid", "Group"))]
data = aggregate(.~Site + Fuel + Date, data=data, FUN=mean)
set.seed(1000)
drop_cols = c("Site", "Date", "station_distance", "Percent") #Fields to exclude from processing
drop_fuels= c("Red Shank", "Manzanita, Eastwoods", "Brittlebrush", "chamise, old growth") #Fuels to exclude from processing
data <- subset(data, !(Fuel %in% drop_fuels))
fuels <- as.character((distinct(data, Fuel)[,1]))
data <- data[,-which(names(data) %in% drop_cols)]
X <- data[,-which(names(data) =="Fuel")]
X <- scale(X)
decomp <- function(data, ncomps, nvars){
Xpca <- prcomp(data)
results = list()
names = c()
for (i in 1:ncomps){
Xhat = Xpca$x[,i] %*% t(Xpca$rotation[,i])
comp <- abs(Xhat[1,])
comp <- comp[order(comp, decreasing=TRUE)]
results[i] <- data.frame(names(comp[1:nvars]))
names <- c(names, paste0("PC", i))
}
results = data.frame(results)
colnames(results) <- names
return(results)
}
pca <- prcomp(X)
scree <- fviz_eig(pca)
scree
stargazer(xpca, out="pca_summary.tex", summary = F)
summary(pca)
xpca <- as.data.frame(summary(pca)$importance)
stargazer(xpca, out="pca_summary.tex", summary = F)
xpca
stargazer(xpca, out="pca_summary.tex", summary = F)
names(xpca)
xpca[,1:22]
t(xpca[,1:22])
stargazer(t(xpca[,1:22]), out="pca_summary.tex", summary = F)
